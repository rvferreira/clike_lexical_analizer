PARSER_BEGIN(LeAnal)

public class LeAnal {

	public static void main(String args []) throws ParseException{
		try{
			LeAnal parser = new LeAnal(System.in);
			parser.Program();
		}
		catch(ParseException e){
			System.out.println(e.getMessage());
			System.out.println("Analizador encontrou erros na análise! \n\n");
		}
		
	}

}

PARSER_END(LeAnal)

//TOKENS ESTÁTICOS
TOKEN:
{
	<NUMBER:["0"-"9"]>{System.out.println("NUMBER -> "+image);}
	|<LETTER:["a"-"z","A"-"Z"]> {System.out.println("LETTER ->");}
	|<LPAREN: ")">{System.out.println("LPAREN -> " + image);}
    	|<RPAREN: "(">{System.out.println("RPAREN -> " + image);}
	|<LBRACE: "{">{System.out.println("LBRACE -> " + image);}
	|<RBRACE: "}">{System.out.println("RBRACE -> " + image);}
	|<LBRACKET: "]">{System.out.println("LBRACKET -> " + image);}
	|<RBRACKET: "[">{System.out.println("RBRACKET-> " + image);}
	|<SEMICOLON: ";">{System.out.println("SEMICOLON -> " + image);}
	|<EQUAL: "="> {System.out.println("EQUAL -> "+image);}
	|<MULT: "*"> {System.out.println("MULT -> "+image);}
    	|<MOD: "%"> {System.out.println("MOD -> "+image);}
	|<DIV: "/"> {System.out.println("DIV -> "+image);}
	|<PLUS: "+"> {System.out.println("PLUS -> "+image);}
	|<MINUS: "-"> {System.out.println("MNIUS -> "+image);}
	|<OR: "||"> {System.out.println("OR ->"+image);}
	|<AND: "&&"> {System.out.println("AND -> "+image);}
	|<DEQUAL: "=="> {System.out.println("DEQUAL -> "+image);}
	|<DIF: "!="> {System.out.println("DIF -> "+image);}
	|<LESS: "<"> {System.out.println("LESS -> "+image);}
	|<GREATER: ">"> {System.out.println("GREATER -> "+image);}
	|<LEQ: "<="> {System.out.println("LEQ -> "+image);}
	|<GEQ: ">="> {System.out.println("GEQ -> "+image);}
	
}

//PALAVRAS RESERVADAS
TOKEN:
{
	<IF: "if">{System.out.println("IF -> "+image);}
	|<ELSE: "else">{System.out.println("ELSE -> "+image);}
	|<WHILE: "while">{System.out.println("WHILE -> "+image);}
	|<MAIN: "main">{System.out.println("MAIN -> "+image);}
	|<TYPEDEF: "typedef">{System.out.println("TYPEDEF -> "+image);}
	|<INT: "int">{System.out.println("INT -> "+image);}
	|<FLOAT: "float">{System.out.println("FLOAT -> "+image);}
	|<CHAR: "char">{System.out.println("CHAR -> "+image);}
	
}

//TOKEN IDENTIFICADOR
TOKEN:
{
	<IDENT:<LETTER>(<LETTER>|<NUMBER>)*>{System.out.println("IDENT -> "+image);}
}

/********************************************************
 * THE C-LIKE LANGUAGE GRAMMAR WITH TYPEDEF STARTS HERE *
 ********************************************************/
 
//1
void Program():{}
{
//	[(VariableDeclaration()|TypeDefDeclaration())*]
	(ProcedureDeclaration())+
	<EOF>
}

//2
void ProcedureDeclaration():{}
{
	(<MULT>)+
}
