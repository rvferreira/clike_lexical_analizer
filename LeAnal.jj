PARSER_BEGIN(LeAnal)

public class LeAnal {

	public static void main(String args []) throws ParseException{
		try{
			LeAnal parser = new LeAnal(System.in);
			parser.Program();
		}
		catch(ParseException e){
			System.out.println(e.getMessage());
			System.out.println("Analizador encontrou erros na análise! \n\n");
		}
	}
}

PARSER_END(LeAnal)

//ESPACOS VAZIOS
SKIP :
{
	  " "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
}

//TOKENS ESTÁTICOS
TOKEN:
{
	<NUMBER:["0"-"9"]+>{System.out.println("NUMBER -> "+image);}
	|<RPAREN: ")">{System.out.println("RPAREN -> " + image);}
    	|<LPAREN: "(">{System.out.println("LPAREN -> " + image);}
	|<LBRACE: "{">{System.out.println("LBRACE -> " + image);}
	|<RBRACE: "}">{System.out.println("RBRACE -> " + image);}
	|<RBRACKET: "]">{System.out.println("RBRACKET -> " + image);}
	|<LBRACKET: "[">{System.out.println("LBRACKET-> " + image);}
	|<SEMICOLON: ";">{System.out.println("SEMICOLON -> " + image);}
	|<COMMA: ",">{System.out.println("COMMA-> " + image);}
	|<EQUAL: "="> {System.out.println("EQUAL -> "+image);}
	|<MULT: "*"> {System.out.println("MULT -> "+image);}
    	|<MOD: "%"> {System.out.println("MOD -> "+image);}
	|<DIV: "/"> {System.out.println("DIV -> "+image);}
	|<PLUS: "+"> {System.out.println("PLUS -> "+image);}
	|<MINUS: "-"> {System.out.println("MINUS -> "+image);}
	|<NOT: "!"> {System.out.println("NOT -> "+image);}
	|<OR: "||"> {System.out.println("OR ->"+image);}
	|<AND: "&&"> {System.out.println("AND -> "+image);}
	|<DEQUAL: "=="> {System.out.println("DEQUAL -> "+image);}
	|<DIF: "!="> {System.out.println("DIF -> "+image);}
	|<LESS: "<"> {System.out.println("LESS -> "+image);}
	|<GREATER: ">"> {System.out.println("GREATER -> "+image);}
	|<LEQ: "<="> {System.out.println("LEQ -> "+image);}
	|<GEQ: ">="> {System.out.println("GEQ -> "+image);}
	
}

//PALAVRAS RESERVADAS
TOKEN:
{
	<IF: "if">{System.out.println("IF -> "+image);}
	|<ELSE: "else">{System.out.println("ELSE -> "+image);}
	|<WHILE: "while">{System.out.println("WHILE -> "+image);}
	|<TYPEDEF: "typedef">{System.out.println("TYPEDEF -> "+image);}
	|<VOID: "void">{System.out.println("VOID -> "+image);}
	
}

//TOKEN IDENTIFICADOR
TOKEN:
{
	<IDENT:<LETTER>(<LETTER>|<NUMBER>)*>{System.out.println("IDENT -> "+image);}
	|<LETTER:["a"-"z","_","A"-"Z"]> {System.out.println("LETTER ->");}
}

/********************************************************
 * THE C-LIKE LANGUAGE GRAMMAR WITH TYPEDEF STARTS HERE *
 ********************************************************/
 
//1
void Program():{}
{
	(VariableDeclaration()|TypeDefDeclaration())*
	(ProcedureDeclaration())+
	<EOF>
}

//2
void ProcedureDeclaration():{}
{	
	<VOID>(ProcedureHeading())<LBRACE>(ProcedureBody())<RBRACE>
}

//3
void ProcedureBody():{}
{
	(TypeDefDeclaration()|LOOKAHEAD(4)VariableDeclaration()|StatementSequence())*
}

//4
void ProcedureHeading():{}
{
	<IDENT><LPAREN>[FormalParameters()]<RPAREN>
}

//5
void FormalParameters():{}
{
	(FPSection())
	(<COMMA>FPSection())*
}

//6
void FPSection():{}
{
	(Type())<IDENT>
}
//7
void TypeDefDeclaration():{}
{
	<TYPEDEF>(Type())<IDENT><SEMICOLON>
}

//8
void VariableDeclaration():{}
{
	(Type())(IdentList())<SEMICOLON>
}

//9
void IdentList():{}
{
	LOOKAHEAD(4)<IDENT>
	|(<IDENT>)(<COMMA><IDENT>)*
}

//10
void Type():{}
{
	(<IDENT>)
}

//11
void StatementSequence():{}
{
	(LOOKAHEAD(2)Statement())+
}

//12
void Statement():{}
{
	LOOKAHEAD(4)Assignment()
	|ProcedureCall()
	|WhileStatement()
	|IfStatement()

}

//13
void WhileStatement():{}
{	
	<WHILE>
	<LPAREN>Logical_OR()<RPAREN>
	<LBRACE>StatementSequence()<RBRACE>
}

//14
void IfStatement():{}
{
	<IF><LPAREN>Logical_OR()<RPAREN>
	<LBRACE>StatementSequence()<RBRACE>
	[<ELSE><LBRACE>Statement()<RBRACE>]
}

//15
void ProcedureCall():{}
{
	Designator()<LPAREN>(ExpList())*<RPAREN><SEMICOLON>
}

//16
void ExpList():{}
{
	Logical_OR()(<COMMA>Logical_OR())*
}
//17
void Assignment():{}
{
	<IDENT><EQUAL>Logical_OR()<SEMICOLON>
}

//18
void Logical_OR():{}
{
	Logical_AND()(<OR>Logical_AND())*
}

//19
void Logical_AND():{}
{
	Expression()(<AND>Expression())* 
}

//20
void Expression():{}
{
	EqualityExpr()[(<DEQUAL>|<DIF>)EqualityExpr()]
}

//21
void EqualityExpr():{}
{
	SimpleExpr()[LOOKAHEAD(2)(<LESS> | <LEQ> | <GREATER> | <GEQ>)SimpleExpr()]
}

//22
void SimpleExpr():{}
{
	[<PLUS>|<MINUS>]Term()
	(LOOKAHEAD(4)(<PLUS>|<MINUS>)Term())*
}

//23
void Term():{}
{
	Unary()((<MULT>|<DIV>|<MOD>)Unary())*
}

//24
void Unary():{}
{
	(<NOT>Unary())|Factor()
}

//25
void Factor():{}
{
	<NUMBER>
	|Designator()
	|<LPAREN>Logical_OR()<RPAREN> 
}

//26
void Designator():{}
{
	<IDENT>
}




