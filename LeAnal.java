/* LeAnal.java */
/* Generated By:JavaCC: Do not edit this line. LeAnal.java */
public class LeAnal implements LeAnalConstants {

        public static void main(String args []) throws ParseException{
                try{
                        LeAnal parser = new LeAnal(System.in);
                        parser.Program();
                }
                catch(ParseException e){
                        System.out.println(e.getMessage());
                        System.out.println("Analizador encontrou erros na an\u00e1lise! \u005cn\u005cn");
                }
        }

/********************************************************
 * THE C-LIKE LANGUAGE GRAMMAR WITH TYPEDEF STARTS HERE *
 ********************************************************/

//1
  static final public void Program() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TYPEDEF:
      case INT:
      case FLOAT:
      case CHAR:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case FLOAT:
      case CHAR:{
        VariableDeclaration();
        break;
        }
      case TYPEDEF:{
        TypeDefDeclaration();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_2:
    while (true) {
      ProcedureDeclaration();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VOID:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(0);
  }

//2
  static final public void ProcedureDeclaration() throws ParseException {
    jj_consume_token(VOID);
    ProcedureHeading();
    jj_consume_token(LBRACE);
    ProcedureBody();
    jj_consume_token(RBRACE);
  }

//3
  static final public void ProcedureBody() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TYPEDEF:
      case INT:
      case FLOAT:
      case CHAR:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case FLOAT:
      case CHAR:{
        VariableDeclaration();
        break;
        }
      case TYPEDEF:{
        TypeDefDeclaration();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    StatementSequence();
  }

//4
  static final public void ProcedureHeading() throws ParseException {
    jj_consume_token(IDENT);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case FLOAT:
    case CHAR:{
      FormalParameters();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

//5
  static final public void FormalParameters() throws ParseException {
    FPSection();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      FPSection();
    }
  }

//6
  static final public void FPSection() throws ParseException {
    Type();
    jj_consume_token(IDENT);
  }

//7
  static final public void TypeDefDeclaration() throws ParseException {
    jj_consume_token(TYPEDEF);
    Type();
    jj_consume_token(IDENT);
    jj_consume_token(SEMICOLON);
  }

//8
  static final public void VariableDeclaration() throws ParseException {
    Type();
    IdentList();
    jj_consume_token(SEMICOLON);
  }

//9
  static final public void IdentList() throws ParseException {
    jj_consume_token(IDENT);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENT);
    }
  }

//10
  static final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAR:{
      jj_consume_token(CHAR);
      break;
      }
    case INT:{
      jj_consume_token(INT);
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//11
  static final public void StatementSequence() throws ParseException {
    label_6:
    while (true) {
      Statement();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case WHILE:
      case IDENT:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
    }
  }

//12.1
  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENT:{
      Statement2();
      break;
      }
    case WHILE:{
      WhileStatement();
      break;
      }
    case IF:{
      IfStatement();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//12.2 Mutual Prefix Warning Solving
  static final public void Statement2() throws ParseException {
    jj_consume_token(IDENT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUAL:{
      Assignment();
      break;
      }
    case LPAREN:{
      ProcedureCall();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//13
  static final public void WhileStatement() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    Logical_OR();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    StatementSequence();
    jj_consume_token(RBRACE);
  }

//14
  static final public void IfStatement() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    Logical_OR();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    StatementSequence();
    jj_consume_token(RBRACE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      jj_consume_token(LBRACE);
      Statement();
      jj_consume_token(RBRACE);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

//15
  static final public void ProcedureCall() throws ParseException {
    jj_consume_token(LPAREN);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:
      case LPAREN:
      case PLUS:
      case MINUS:
      case NOT:
      case IDENT:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_7;
      }
      ExpList();
    }
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
  }

//16
  static final public void ExpList() throws ParseException {
    Logical_OR();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      Logical_OR();
    }
  }

//17
  static final public void Assignment() throws ParseException {
    jj_consume_token(EQUAL);
    Logical_OR();
    jj_consume_token(SEMICOLON);
  }

//18
  static final public void Logical_OR() throws ParseException {
    Logical_AND();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_9;
      }
      jj_consume_token(OR);
      Logical_AND();
    }
  }

//19
  static final public void Logical_AND() throws ParseException {
    Expression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_10;
      }
      jj_consume_token(AND);
      Expression();
    }
  }

//20
  static final public void Expression() throws ParseException {
    EqualityExpr();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEQUAL:
    case DIF:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEQUAL:{
        jj_consume_token(DEQUAL);
        break;
        }
      case DIF:{
        jj_consume_token(DIF);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      EqualityExpr();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

//21
  static final public void EqualityExpr() throws ParseException {
    SimpleExpr();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LESS:
    case GREATER:
    case LEQ:
    case GEQ:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LESS:{
        jj_consume_token(LESS);
        break;
        }
      case LEQ:{
        jj_consume_token(LEQ);
        break;
        }
      case GREATER:{
        jj_consume_token(GREATER);
        break;
        }
      case GEQ:{
        jj_consume_token(GEQ);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      SimpleExpr();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

//22
  static final public void SimpleExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    Term();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Term();
    }
  }

//23
  static final public void Term() throws ParseException {
    Unary();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULT:
      case MOD:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULT:{
        jj_consume_token(MULT);
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
        break;
        }
      case MOD:{
        jj_consume_token(MOD);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Unary();
    }
  }

//24
  static final public void Unary() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      Unary();
      break;
      }
    case NUMBER:
    case LPAREN:
    case IDENT:{
      Factor();
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//25
  static final public void Factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      jj_consume_token(NUMBER);
      break;
      }
    case IDENT:{
      Designator();
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      Logical_OR();
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//26
  static final public void Designator() throws ParseException {
    jj_consume_token(IDENT);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LeAnalTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x4000,0x0,0x40000000,0x40000000,0x8100,0x80000000,0x380140,0x4000,0x400000,0x800000,0x3000000,0x3000000,0x3c000000,0x3c000000,0x180000,0x180000,0x180000,0x180000,0x70000,0x70000,0x200140,0x140,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1e,0x1e,0x20,0x1e,0x1e,0x1c,0x0,0x0,0x1c,0x41,0x41,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x40,};
   }

  /** Constructor with InputStream. */
  public LeAnal(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LeAnal(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LeAnalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public LeAnal(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LeAnalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public LeAnal(LeAnalTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LeAnalTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
